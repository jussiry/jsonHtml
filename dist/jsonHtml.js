// Generated by CoffeeScript 1.4.0
(function() {
  var allActionsMap, bindEvent, createElementAndIterateChildren, create_html_node, dasherize, eventAttrsMap, eventName, globalRef, iterate, jsonHtml, merge, setAttribute, stackDepth, tagName, tagsMap, _i, _j, _len, _len1, _ref, _ref1,
    __slice = [].slice;

  globalRef = typeof window !== "undefined" && window !== null ? window : global;

  if ((typeof module !== "undefined" && module !== null) && module !== globalRef.module) {
    module.exports = jsonHtml = {};
  } else if (this === globalRef) {
    this.jsonHtml = jsonHtml = {};
  } else {
    jsonHtml = this;
  }

  merge = function() {
    var first, key, obj, rest, val, _i, _len;
    first = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = rest.length; _i < _len; _i++) {
      obj = rest[_i];
      for (key in obj) {
        val = obj[key];
        first[key] = val;
      }
    }
    return first;
  };

  dasherize = function(str) {
    return str.replace(/[A-Z]/g, function(match, ind) {
      return (ind !== 0 ? '-' : '') + match.toLowerCase();
    });
  };

  setAttribute = function(attrName, attrVal, node) {
    return node.setAttribute(attrName, attrVal);
  };

  createElementAndIterateChildren = function(key, subVal, node) {
    var tag;
    tag = create_html_node(key);
    iterate(tag, subVal);
    return node.appendChild(tag);
  };

  allActionsMap = {};

  jsonHtml.addActions = function(actionsMap) {
    return merge(allActionsMap, actionsMap);
  };

  tagsMap = {};

  _ref = this.commonTags = ['a', 'body', 'br', 'button', 'canvas', 'div', 'em', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'html', 'iframe', 'img', 'input', 'li', 'ol', 'p', 'pre', 'script', 'span', 'strong', 'table', 'td', 'textarea', 'th', 'tr', 'ul'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    tagName = _ref[_i];
    tagsMap[tagName] = createElementAndIterateChildren;
  }

  jsonHtml.addActions(tagsMap);

  bindEvent = function(attrName, attrVal, node) {
    return node.addEventListener(attrName.toLowerCase().slice(2), attrVal, false);
  };

  eventAttrsMap = {};

  _ref1 = this.eventAttrs = ['onKeyDown', 'onKeyUp', 'onKeyPress', 'onClick', 'onDoubleClick', 'onChange', 'onInput', 'onSubmit', 'onBlur', 'onFocus', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseDown', 'onMouseUp', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDrag', 'onDragEnd', 'onDragStart', 'onDrop'];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    eventName = _ref1[_j];
    eventAttrsMap[eventName] = bindEvent;
  }

  jsonHtml.addActions(eventAttrsMap);

  jsonHtml.addActions({
    RAW: function(attrName, attrVal, node) {
      return node.innerHTML = attrVal;
    },
    text: function(attrName, attrVal, node) {
      return node.textContent = attrVal;
    },
    me: function(attrName, attrVal, node) {
      return iterate(node, attrVal);
    }
  });

  create_html_node = function(sKey) {
    var classesMatch, domElName, el, idMatch;
    domElName = sKey.match(/^[^ #.]+/);
    domElName = domElName ? dasherize(domElName[0]) : 'div';
    el = document.createElement(domElName);
    if (idMatch = sKey.match(/#([^ .]+)/)) {
      el.id = idMatch[1];
    }
    if (classesMatch = sKey.match(/\.[^ #.]+/g)) {
      el.setAttribute('class', classesMatch.map(function(cStr) {
        return cStr.slice(1);
      }).join(' '));
    }
    return el;
  };

  stackDepth = 0;

  iterate = function(node, val) {
    var action, actionMatch, attrName, key, subVal, _k, _len2;
    if (!(node instanceof Node)) {
      throw Error("Illegal object in \:jsonHtml");
    }
    if (val == null) {
      return node;
    }
    if (stackDepth > 100) {
      stackDepth = 0;
      throw "jsonHtml stack depth > 100; endless loop?";
    }
    stackDepth++;
    if (typeof val === 'function') {
      val = val(node);
    }
    if (val instanceof Array) {
      for (_k = 0, _len2 = val.length; _k < _len2; _k++) {
        subVal = val[_k];
        iterate(node, subVal);
      }
    } else if (val instanceof Node) {
      node.appendChild(val);
    } else if (typeof val === 'object') {
      for (key in val) {
        subVal = val[key];
        if ((actionMatch = key.match(/^\w+/)) && (action = allActionsMap[actionMatch[0]])) {
          action(key, subVal, node);
        } else if (/^[a-z]/.test(key)) {
          attrName = dasherize(key);
          setAttribute(attrName, subVal, node);
        } else {
          createElementAndIterateChildren(key, subVal, node);
        }
      }
    } else {
      node.textContent = val;
    }
    stackDepth--;
    return node;
  };

  jsonHtml.parse = function(tmplObj, rootNode) {
    if (rootNode == null) {
      rootNode = document.createDocumentFragment();
    }
    return iterate(rootNode, tmplObj);
  };

}).call(this);
